/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/room": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 방 정보 수정(방장만 가능) */
    put: operations["updateRoom"];
    /** 방 생성 */
    post: operations["createRoom"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/member": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 사용자 정보 조회 */
    get: operations["readMember"];
    /** 닉네임 수정 */
    put: operations["updateMemberNickname"];
    post?: never;
    /** 회원 탈퇴 */
    delete: operations["deleteMember"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/member/profileImg": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 프로필 사진 수정 */
    put: operations["updateProfileImg"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["logout"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/room/join": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 방 입장 */
    post: operations["createMemberRoom"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/{provider}/callback": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["socialCallback"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/login/kakao": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["redirectToKakao"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/login/google": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["redirectToGoogle"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/room/{roomId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 단일 방 정보 조회 */
    get: operations["readRoom"];
    put?: never;
    post?: never;
    /** 방 삭제 (방장만 가능) */
    delete: operations["deleteRoom"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/room/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 방 리스트 조회 */
    get: operations["getListByEmail"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/room/leave/{roomId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 방 퇴장 */
    delete: operations["leaveRoom"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/room/forcedExit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 방 퇴장 */
    delete: operations["forcedExit"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    RoomUpdateDTO: {
      /**
       * @description 수정할 방ID
       * @default 728t5EIw
       */
      roomId: string;
      /**
       * @description 수정할 제목
       * @default OO로 떠나자
       */
      title: string;
      /**
       * @description 수정할 나라
       * @default 독일
       */
      country: string;
      /**
       * Format: date
       * @description 수정할 여행 시작일
       */
      startDate?: string;
      /**
       * Format: date
       * @description 수정할 여행 끝일
       */
      endDate?: string;
    };
    RoomResponseDTO: {
      roomId?: string;
      title?: string;
      country?: string;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      roomCode?: string;
      hostEmail?: string;
      members?: string[];
    };
    MemberUpdateDTO: {
      nickname?: string;
    };
    MemberResponseDTO: {
      email?: string;
      nickname?: string;
      profileImage?: string;
    };
    RoomRequestDTO: {
      /**
       * @description 방 제목
       * @default OO여행!!
       */
      title: string;
      /**
       * @description 나라
       * @default 프랑스
       */
      country: string;
      /**
       * Format: date
       * @description 여행 시작일
       */
      startDate?: string;
      /**
       * Format: date
       * @description 여행 끝일
       */
      endDate?: string;
    };
    /** @description 입장 응답 메시지 */
    JoinResponse: {
      /**
       * @description 입장 완료 메시지
       * @example 방에 입장했습니다.
       */
      message?: string;
    };
    MemberRoomRequestDTO: {
      /**
       * @description 방ID
       * @default 728t5EIw
       */
      roomId: string;
      /**
       * @description 방CODE
       * @default PBBMbFpC
       */
      roomCode: string;
    };
    ApplicationContext: {
      parent?: components["schemas"]["ApplicationContext"];
      id?: string;
      displayName?: string;
      applicationName?: string;
      /** Format: int64 */
      startupDate?: number;
      autowireCapableBeanFactory?: components["schemas"]["AutowireCapableBeanFactory"];
      environment?: components["schemas"]["Environment"];
      /** Format: int32 */
      beanDefinitionCount?: number;
      beanDefinitionNames?: string[];
      parentBeanFactory?: components["schemas"]["BeanFactory"];
      classLoader?: {
        name?: string;
        registeredAsParallelCapable?: boolean;
        parent?: {
          name?: string;
          registeredAsParallelCapable?: boolean;
          unnamedModule?: {
            name?: string;
            classLoader?: {
              name?: string;
              registeredAsParallelCapable?: boolean;
              definedPackages?: {
                name?: string;
                annotations?: Record<string, never>[];
                declaredAnnotations?: Record<string, never>[];
                sealed?: boolean;
                specificationTitle?: string;
                specificationVersion?: string;
                specificationVendor?: string;
                implementationTitle?: string;
                implementationVersion?: string;
                implementationVendor?: string;
              }[];
              defaultAssertionStatus?: boolean;
            };
            descriptor?: {
              open?: boolean;
              automatic?: boolean;
            };
            named?: boolean;
            annotations?: Record<string, never>[];
            declaredAnnotations?: Record<string, never>[];
            packages?: string[];
            layer?: Record<string, never>;
          };
          definedPackages?: {
            name?: string;
            annotations?: Record<string, never>[];
            declaredAnnotations?: Record<string, never>[];
            sealed?: boolean;
            specificationTitle?: string;
            specificationVersion?: string;
            specificationVendor?: string;
            implementationTitle?: string;
            implementationVersion?: string;
            implementationVendor?: string;
          }[];
          defaultAssertionStatus?: boolean;
        };
        unnamedModule?: {
          name?: string;
          classLoader?: {
            name?: string;
            registeredAsParallelCapable?: boolean;
            definedPackages?: {
              name?: string;
              annotations?: Record<string, never>[];
              declaredAnnotations?: Record<string, never>[];
              sealed?: boolean;
              specificationTitle?: string;
              specificationVersion?: string;
              specificationVendor?: string;
              implementationTitle?: string;
              implementationVersion?: string;
              implementationVendor?: string;
            }[];
            defaultAssertionStatus?: boolean;
          };
          descriptor?: {
            open?: boolean;
            automatic?: boolean;
          };
          named?: boolean;
          annotations?: Record<string, never>[];
          declaredAnnotations?: Record<string, never>[];
          packages?: string[];
          layer?: Record<string, never>;
        };
        definedPackages?: {
          name?: string;
          annotations?: Record<string, never>[];
          declaredAnnotations?: Record<string, never>[];
          sealed?: boolean;
          specificationTitle?: string;
          specificationVersion?: string;
          specificationVendor?: string;
          implementationTitle?: string;
          implementationVersion?: string;
          implementationVendor?: string;
        }[];
        defaultAssertionStatus?: boolean;
      };
    };
    AutowireCapableBeanFactory: Record<string, never>;
    BeanFactory: Record<string, never>;
    Environment: {
      activeProfiles?: string[];
      defaultProfiles?: string[];
    };
    FilterRegistration: {
      servletNameMappings?: string[];
      urlPatternMappings?: string[];
      name?: string;
      className?: string;
      initParameters?: {
        [key: string]: string;
      };
    };
    HttpStatusCode: {
      error?: boolean;
      is4xxClientError?: boolean;
      is5xxServerError?: boolean;
      is1xxInformational?: boolean;
      is2xxSuccessful?: boolean;
      is3xxRedirection?: boolean;
    };
    JspConfigDescriptor: {
      taglibs?: components["schemas"]["TaglibDescriptor"][];
      jspPropertyGroups?: components["schemas"]["JspPropertyGroupDescriptor"][];
    };
    JspPropertyGroupDescriptor: {
      defaultContentType?: string;
      buffer?: string;
      elIgnored?: string;
      errorOnELNotFound?: string;
      pageEncoding?: string;
      scriptingInvalid?: string;
      isXml?: string;
      includePreludes?: string[];
      includeCodas?: string[];
      deferredSyntaxAllowedAsLiteral?: string;
      trimDirectiveWhitespaces?: string;
      errorOnUndeclaredNamespace?: string;
      urlPatterns?: string[];
    };
    RedirectView: {
      applicationContext?: components["schemas"]["ApplicationContext"];
      servletContext?: components["schemas"]["ServletContext"];
      contentType?: string;
      requestContextAttribute?: string;
      staticAttributes?: {
        [key: string]: Record<string, never>;
      };
      exposePathVariables?: boolean;
      exposeContextBeansAsAttributes?: boolean;
      exposedContextBeanNames?: string[];
      beanName?: string;
      url?: string;
      contextRelative?: boolean;
      http10Compatible?: boolean;
      exposeModelAttributes?: boolean;
      encodingScheme?: string;
      statusCode?: components["schemas"]["HttpStatusCode"];
      expandUriTemplateVariables?: boolean;
      propagateQueryParams?: boolean;
      hosts?: string[];
      redirectView?: boolean;
      propagateQueryProperties?: boolean;
      attributes?: {
        [key: string]: string;
      };
      attributesMap?: {
        [key: string]: Record<string, never>;
      };
      attributesCSV?: string;
    };
    ServletContext: {
      sessionCookieConfig?: components["schemas"]["SessionCookieConfig"];
      virtualServerName?: string;
      classLoader?: {
        name?: string;
        registeredAsParallelCapable?: boolean;
        definedPackages?: {
          name?: string;
          annotations?: Record<string, never>[];
          declaredAnnotations?: Record<string, never>[];
          sealed?: boolean;
          specificationTitle?: string;
          specificationVersion?: string;
          specificationVendor?: string;
          implementationTitle?: string;
          implementationVersion?: string;
          implementationVendor?: string;
        }[];
        defaultAssertionStatus?: boolean;
      };
      /** Format: int32 */
      majorVersion?: number;
      /** Format: int32 */
      minorVersion?: number;
      attributeNames?: Record<string, never>;
      contextPath?: string;
      initParameterNames?: Record<string, never>;
      sessionTrackingModes?: ("COOKIE" | "URL" | "SSL")[];
      /** Format: int32 */
      sessionTimeout?: number;
      servletRegistrations?: {
        [key: string]: components["schemas"]["ServletRegistration"];
      };
      filterRegistrations?: {
        [key: string]: components["schemas"]["FilterRegistration"];
      };
      /** Format: int32 */
      effectiveMajorVersion?: number;
      /** Format: int32 */
      effectiveMinorVersion?: number;
      serverInfo?: string;
      servletContextName?: string;
      defaultSessionTrackingModes?: ("COOKIE" | "URL" | "SSL")[];
      effectiveSessionTrackingModes?: ("COOKIE" | "URL" | "SSL")[];
      jspConfigDescriptor?: components["schemas"]["JspConfigDescriptor"];
      requestCharacterEncoding?: string;
      responseCharacterEncoding?: string;
    };
    ServletRegistration: {
      mappings?: string[];
      runAsRole?: string;
      name?: string;
      className?: string;
      initParameters?: {
        [key: string]: string;
      };
    };
    SessionCookieConfig: {
      /** Format: int32 */
      maxAge?: number;
      domain?: string;
      httpOnly?: boolean;
      path?: string;
      secure?: boolean;
      name?: string;
      attributes?: {
        [key: string]: string;
      };
      /** @deprecated */
      comment?: string;
    };
    TaglibDescriptor: {
      taglibLocation?: string;
      taglibURI?: string;
    };
    RoomListDTO: {
      roomId?: string;
      /** @default OO여행!! */
      title: string;
      /** @default 프랑스 */
      country: string;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
    };
    /** @description 삭제 응답 메시지 */
    DeleteResponse: {
      /**
       * @description 삭제 완료 메시지
       * @example 삭제되었습니다.
       */
      message?: string;
    };
    /** @description 퇴장 응답 메시지 */
    LeaveResponse: {
      /**
       * @description 퇴장 완료 메시지
       * @example 퇴장하였습니다.
       */
      message?: string;
    };
    MemberRoomForceDeleteDTO: {
      deletingEmail?: string;
      roomId?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  updateRoom: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoomUpdateDTO"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RoomResponseDTO"];
        };
      };
      /** @description 권한이 없습니다 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 방을 찾을 수 없습니다 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createRoom: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoomRequestDTO"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RoomResponseDTO"];
        };
      };
      /** @description 날짜를 제대로 입력해주세요.
       *      여행기간 설정은 30일까지 가능합니다. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  readMember: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["MemberResponseDTO"];
        };
      };
      /** @description 사용자 정보를 찾을 수 없습니다. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateMemberNickname: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MemberUpdateDTO"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["MemberResponseDTO"];
        };
      };
    };
  };
  deleteMember: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 삭제되었습니다. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeleteResponse"];
        };
      };
      /** @description 이미 존재하지 않는 회원입니다. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateProfileImg: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          image: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["MemberResponseDTO"];
        };
      };
    };
  };
  logout: {
    parameters: {
      query?: never;
      header: {
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  createMemberRoom: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MemberRoomRequestDTO"];
      };
    };
    responses: {
      /** @description 방에 입장했습니다. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JoinResponse"];
        };
      };
      /** @description ROOMCODE가 맞지 않습니다.
       *      정원을 초과하였습니다. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 방을 찾을 수 없습니다. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 이미 들어와 있는 사용자입니다. */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  socialCallback: {
    parameters: {
      query: {
        code: string;
        secretKey: string;
        url: string;
      };
      header?: never;
      path: {
        provider: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RedirectView"];
        };
      };
    };
  };
  redirectToKakao: {
    parameters: {
      query: {
        clientId: string;
        redirectUri: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  redirectToGoogle: {
    parameters: {
      query: {
        clientId: string;
        redirectUri: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  readRoom: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        roomId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RoomResponseDTO"];
        };
      };
      /** @description 방을 찾을 수 없습니다 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteRoom: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        roomId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 삭제되었습니다. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeleteResponse"];
        };
      };
      /** @description 권한이 없습니다 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 방을 찾을 수 없습니다 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getListByEmail: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RoomListDTO"][];
        };
      };
    };
  };
  leaveRoom: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        roomId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 퇴장하였습니다. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LeaveResponse"];
        };
      };
      /** @description 이미 퇴장한 사용자입니다. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 방을 찾을 수 없습니다.
       *      다음 방장을 찾을 수 없습니다. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  forcedExit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MemberRoomForceDeleteDTO"];
      };
    };
    responses: {
      /** @description 강제퇴장하였습니다. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LeaveResponse"];
        };
      };
      /** @description 권한이 없습니다 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 방을 찾을 수 없습니다 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
